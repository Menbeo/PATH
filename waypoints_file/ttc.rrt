import numpy as np
import math
import matplotlib.pyplot as plt
import random

# Define map size and resolution
area = 288_409.51
size = int(math.sqrt(area))

# Grid map with obstacles
def grid_map(size=size):
    grid = np.zeros((size, size))
    grid[50:80, 50:200] = 1
    grid[220:300, 220:400] = 1
    grid[100:200, 200:537] = 1  
    grid[100:200, 100:200] = 1
    grid[300:400, 400:500] = 1
    grid[200:300, 0:60] = 1
    return grid

# Check if point is free (in bounds and not an obstacle)
def is_free(point, grid):
    x, y = point
    if 0 <= x < grid.shape[0] and 0 <= y < grid.shape[1]:
        return grid[x, y] == 0
    return False

# Check for collision-free path between two points
def collision_free(p1, p2, grid):
    dist = int(distance(p1, p2))
    for i in range(dist):
        x = int(p1[0] + (p2[0] - p1[0]) * i / dist)
        y = int(p1[1] + (p2[1] - p1[1]) * i / dist)
        if not is_free((x, y), grid):
            return False
    return True

# Euclidean distance
def distance(p1, p2):
    return math.hypot(p1[0] - p2[0], p1[1] - p2[1])

# Find nearest node in tree
def nearest(tree, point):
    return min(tree, key=lambda node: distance(node, point))

# Basic RRT
def rrt(grid, start, goal, max_iters=5000, step_size=15):
    if not is_free(start, grid) or not is_free(goal, grid):
        print("⚠️ Start or Goal is not free.")
        return None

    tree = {start: None}

    for _ in range(max_iters):
        rand_point = (random.randint(0, grid.shape[0] - 1), random.randint(0, grid.shape[1] - 1))
        nearest_node = nearest(tree, rand_point)

        theta = math.atan2(rand_point[1] - nearest_node[1], rand_point[0] - nearest_node[0])
        new_x = int(nearest_node[0] + step_size * math.cos(theta))
        new_y = int(nearest_node[1] + step_size * math.sin(theta))
        new_x = max(0, min(grid.shape[0] - 1, new_x))
        new_y = max(0, min(grid.shape[1] - 1, new_y))
        new_point = (new_x, new_y)

        if not is_free(new_point, grid):
            continue
        if not collision_free(nearest_node, new_point, grid):
            continue

        tree[new_point] = nearest_node

        if distance(new_point, goal) < step_size and is_free(goal, grid):
            if collision_free(new_point, goal, grid):
                tree[goal] = new_point
                break

    if goal not in tree:
        return None

    # Reconstruct path
    path = []
    node = goal
    while node is not None:
        path.append(node)
        node = tree[node]
    path.reverse()
    return path

# Visualization
def plot_rrt_result(grid, path, start, goal, title):
    plt.figure(figsize=(8, 8))
    plt.imshow(grid, cmap='gray_r', origin='upper')
    if path:
        path_x, path_y = zip(*path)
        plt.plot(path_y, path_x, color='red', linewidth=2, label='Path')
        plt.scatter(path_y[0], path_x[0], c='green', s=100, label='Start')
        plt.scatter(path_y[-1], path_x[-1], c='blue', s=100, label='Goal')
    else:
        print("⚠️ No path found!")
    plt.title(title)
    plt.grid(True)
    plt.legend()
    plt.show()

# Main execution
grid = grid_map()
start = (30, 30)
goal = (480, 480)
print("Grid shape:", grid.shape)
print("Start is free:", is_free(start, grid))
print("Goal is free:", is_free(goal, grid))

path_rrt = rrt(grid, start, goal)
print("Path found:", path_rrt is not None)
if path_rrt:
    print("Path length:", len(path_rrt))

plot_rrt_result(grid, path_rrt, start, goal, "RRT Path Result")
